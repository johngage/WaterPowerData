{"pages":[{"title":"About","text":"Why I started this blog My background My family My hobbies","tags":"pages","url":"pages/about.html"},{"title":"Book","text":"Coming in Fall 2018 Book: Python Programming for Undergraduate Engineers This books is for undergraduate engineers learning programming. It is focused on using Python and programming to solve engineering problems. Chapter List Preface Chapter 1: Orientation Chapter 2: Engineering 101 Chapter 3: Statics Chapter 4: Circuits I Chapter 5: Strengths Chapter 6: Circuits II Chapter 7: Dynamics Chapter 8: Circuits III Chapter 9: Capstone Appendix Pre-order will be available soon","tags":"pages","url":"pages/book.html"},{"title":"Jupyter Notebooks as Pelican pages","text":"This post contains a jupyter notebook. In [2]: 5 % 2 Out[2]: 1 This is very important and very powerful In [ ]: #August 10, 2018 In [4]: from urllib.request import urlopen html = urlopen ( 'http://pythonscraping.com/pages/page1.html' ) print ( html . read ()) print ( html . headers ) b'<html>\\n<head>\\n<title>A Useful Page</title>\\n</head>\\n<body>\\n<h1>An Interesting Title</h1>\\n<div>\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n</div>\\n</body>\\n</html>\\n' Date: Fri, 10 Aug 2018 17:47:30 GMT Server: Apache Last-Modified: Sat, 09 Jun 2018 19:15:58 GMT ETag: \"4121bc8-234-56e3a58b39172\" Accept-Ranges: bytes Content-Length: 564 Cache-Control: max-age=1209600 Expires: Fri, 24 Aug 2018 17:47:30 GMT Connection: close Content-Type: text/html In [24]: #!pip install beautifulsoup4 #Requirement already satisfied: #!pip install lxml #Requirement already satisfied: lxml in /Users/JohnGage/anaconda3/lib/python3.6/site-packages (4.1.1) #!pip install html5lib #Requirement already satisfied: html5lib in /Users/JohnGage/anaconda3/lib/python3.6/site-packages (1.0.1) Requirement already satisfied: html5lib in /Users/JohnGage/anaconda3/lib/python3.6/site-packages (1.0.1) Requirement already satisfied: six>=1.9 in /Users/JohnGage/anaconda3/lib/python3.6/site-packages (from html5lib) (1.11.0) Requirement already satisfied: webencodings in /Users/JohnGage/anaconda3/lib/python3.6/site-packages (from html5lib) (0.5.1) In [12]: from urllib.request import urlopen from bs4 import BeautifulSoup html = urlopen ( 'http://www.pythonscraping.com/pages/page1.html' ) bs = BeautifulSoup ( html . read (), 'html.parser' ) print ( bs . h1 ) print ( bs . div ) <h1>An Interesting Title</h1> <div> Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. </div> In [28]: bs1 = BeautifulSoup ( html . read (), 'html5lib' ) print ( bs1 . head ) bs1 html <head></head> Out[28]: <http.client.HTTPResponse at 0x1076f5dd8> In [37]: from urllib.request import urlopen from urllib.error import HTTPError from urllib.error import URLError #Use this as a function, text calls it \"getSiteHTML\" try : #html = urlopen(\"https://pythonscrapingthisurldoesnotexist.com\") #html = urlopen(\"https://xiowater.com/kibera\")#/ajax/v2/getSioStatus.php?\") html = urlopen ( \"https://xiowater.com\" ) #/ajax/v2/getSioStatus.php?\") except HTTPError as e : print ( \"The server returned an HTTP error\" ) print ( e ) except URLError as e : print ( \"The server could not be found!\" ) print ( e ) else : print ( html . read ()) The server could not be found! <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:777)> In [12]: from urllib.request import urlopen from urllib.error import HTTPError from bs4 import BeautifulSoup def getTitle ( url ): try : html = urlopen ( url ) except HTTPError as e : return None try : bsObj = BeautifulSoup ( html . read (), \"lxml\" ) title = bsObj . body . h1 except AttributeError as e : return None return title title = getTitle ( \"http://www.pythonscraping.com/pages/page1.html\" ) if title == None : print ( \"Title could not be found\" ) else : print ( title ) <h1>An Interesting Title</h1>","tags":"posts","url":"Jupyter notebooks.html"},{"title":"KTC Diagram:Clean Water","text":"Water and Power Examples of Data Analysis Kibera Town Centre Water Utility Diagram of KTC Potable Water Treatment Overall Diagram This site should hold vast lists of data. Overall log of installation local, regional, US , and international water and power data","tags":"Report","url":"ktc-diagramclean-water.html"},{"title":"KTC Water Data","text":"How to understand water flows in Kibera There are only ten (10) numbers that are captured about water flow that are useful for the dashboard at the moment. If you have other information, please share it. The hand-entered daily visual reading of the official water meter, known as the WEDC meter. Though there are manual entry errors, and gaps, this shows about 1,500 entries over time. Today's reading was 70,029 liters pumped. The daily average for the 218 days of 2018 is 70,900 liters a day. That's on the Googlesheet. The XIO readings of: 2. Borehole Pump electrical current in amps: about 200,000 readings so far this year 3. Borehole flow in liters per minute: about 200,000 readings so far this year 4. Borehole tank level in meters: about 200,000 readings so far this year 5: KTC clean water pump electrical current in amps: about 200,000 readings this year 6. KTC Potable Water tank level in meters; The other 15 XIO data feeds: hot water pump current, mezzanine tank level, etc, are not clearly labeled or calibrated. For the energy-estimating HOMER model, we are moving some of the electrical current sensors to measure overall KTC power usage, and then measure a few feeds separately. The hand-entered Point of Sale numbers for jerry-can water sales, either at KTC or at the 10,000-liter tank at Olympic Primary. These show sales of a few dozens of jerry cans. Fifty jerry cans is 1000 liters, so we sell a few thousand liters by jerry can, maximum. The hand-entered Point of Sale numbers for bowser, or water-truck sales. These have dropped to almost zero, but have reached sales of ten or twenty thousand liters per day. Estimates of water flow to Olympic School proper. Unclear to me where this data is held, and how it is acquired. I think Robert said he put a meter on the new tank for Olympic, but I didn't see it. Please update with what you observed. Daily power outages, now running at five a day. Over the past year, an average of two power outages a day, depending on how you treat outages that lasted several days. Clearly, this is the single dominant number for a dashboard attempting to capture how a service and retail business functions. No power, no product, no revenue, no customers. No meaning to marketing or sales initiatives, sales numbers or expenditures if you have no lights, power, Internet, or water pumped to showers or toilets. You mention other numbers that are unfamiliar. What do you mean by \"total potable water\"? Are you referring to the WEDC meter reading for borehole water pumped? Or total water processed to remove fluoride? That's a different, smaller number, since we use unprocessed well water to flush the toilets. What is the source of the data? Where is the data held? What do you mean by \"money earned from selling potable water at different kiosks\"? What is this based on? Volume times price minus costs? There is an ancient spread sheet, manually entered, that made guesses in 2015 about costs and prices. Bad idea to use any ancient estimated cost data to estimate \"money earned\". Might be useful to estimate \"money received in payment\". What is the source, where is the data held? It costs us about USD $ 0.60/ 1000 liters to pump the water from the borehole, about USD $ 2.50/ 1000 liters to process into potable water. What do you mean by \"water being supplied to the school\"? How is this measured? What is the source, where is the data held? What are the numbers? So, after your trip, can you give a clear picture of where 70,000 liters of water a day is going? It's pretty clear that we process 20,000 liters of waste water a day from the showers and toilets. Then we throw the 20,000 liters of expensive, treated water away. It costs us about $2.50/ 1000 liters to process the water. That should be in the dashboard. So, where are the other 50,900 liters a day going? Exactly, where? It's been like this for three years. Here is a work in progress to capture the XIO data from the real-time XIO web site. As you can see, one line of Python code brings in 525,000 readings at one-minute intervals of Borehole Pump current from 2017 and 2018. Five lines, and we have all the XIO data we need. Links to Jupyter Notebooks Online Jupyter notebook analyzing XIO data","tags":"Report","url":"ktc-water-data.html"},{"title":"Data analysis links","text":"What do we want to know about Berkeley? link to content root link to content root link to relative file link to absolute content root link to relative file link to content root Tools that help us understand Berkeley: who lives here, who works here, who visits, and why? What we have built in Berkeley to make our lives as healthy, happy, and productive as possible. What we have built in Berkeley to make us as innovative, as dedicated to our community, and as mutually supportive as possible.","tags":"posts","url":"data-analysis-links.html"},{"title":"Data Analysts","text":"Tags: python, pelican, blog, people Slug: water-people Authors:John Gage Series:example-post-series Series_index: 2 Summary: First post about Water-specific people Lists of discipline experts in data exploration - -lists -more lists <iframe width= \"640\" height= \"390\" src= 'https://www.youtube.com/embed/https://www.youtube.com/watch?v=D0qlS1BRTLA[560]' frameborder= '0' webkitAllowFullScreen mozallowfullscreen allowFullScreen > </iframe> </span> Here is John DeNero giving a DS 8 talk: Online video data","tags":"posts","url":"data-analysts.html"},{"title":"Data Analysts Projects","text":"Pages - -lists -more lists","tags":"posts","url":"data-analysts-projects.html"},{"title":"Water Data","text":"Tags: python, pelican, blog Slug: water-data Authors:John Gage Series:example-post-series Series_index: 1 Summary: First post about Water-specific data sources Water-specific data sources Add all potential sources: all water districts","tags":"posts","url":"water-data.html"},{"title":"Pelican theme names","text":"BT3 -Flat foundation-default-colours pelican-blue Casper2Pelican franticworld pelican-bootstrap3 Flex free-agent pelican-cait Just-Read fresh pelican-fh5co-marble MinimalXY genus pelican-hss Nuja graymill pelican-mockingbird README .rst gum pelican-simplegrey Responsive-Pelican html5-dopetrope pelican-sober SOB hyde pelican-striped-html5up SoMA irfan pelican-twitchy SoMA2 iris pelicanthemes-generator aboutwilson jesuislibre photowall alchemy jojo pjport apricot lab plumage attila lannisport pujangga backdrop lazystrap pure basic lightweight relapse blue-penguin lovers resume bluegrasshopper maggner-pelican semantic-ui blueidea martin-pelican simple-bootstrap bold martyalchin smoothie bootlex material sneakyidea bootstrap materialistic sora bootstrap2 medio storm bootstrap2-dark mediumfox subtle bricabrac medius sundown bricks mg svbhack brownstone minimalX svbtle built-texts mnmlist syte bulrush monospace taman burrito neat tuxlite_tbs cebong nest tuxlite_zf chameleon new-bootstrap2 twenty-html5up chunk nice-blog uikit cid nikhil-theme voce clean-blog niu-x2 voidy-bootstrap crowsfoot nmnlist w3-personal-blog dev-random notebook water-iris dev-random2 notmyidea-cms waterspill dev-random3 notmyidea-cms-fr waterspill-en eevee octopress yapeme elegant ops zurb-F5-basic","tags":"posts","url":"pelican-theme-names.html"},{"title":"Fourth Post - Part 4","text":"This is the fourth post of a series of posts. It will demonstrate tables. Technology Impact Data Energy Data 1 City Water Data 2 State Water Data 2","tags":"posts","url":"fourth-post.html"}]}